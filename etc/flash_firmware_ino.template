#include <util/crc16.h>
#include "Arduino.h"
#include "Wire.h"

#define page_size %d
#define frame_size %d
#define blank 0x%x
#define pages %d
#define firmware_length %d
#define DELAY %d
#define LEFT_ADDRESS 0x50
#define RIGHT_ADDRESS 0x53


#define ENDTRANS_SUCCESS 0
#define ENDTRANS_DATA_TOO_LONG 1
#define ENDTRANS_ADDR_NACK 2
#define ENDTRANS_DATA_NACK 3
#define ENDTRANS_ERROR 4

#define BRIGHT 50
#define RED   BRIGHT,0,0
#define GREEN 0,BRIGHT,0
#define BLUE  0,0,BRIGHT
#define OFF   0,0,0


uint16_t offsets[pages] = {%s};
const byte firmware_left[firmware_length] PROGMEM = {%s};
const byte firmware_right[firmware_length] PROGMEM = {%s};

void huble_led(byte r, byte g, byte b)
{
  // huble led is just pwm connected
  analogWrite(9, 255 - r);
  analogWrite(10, 255 - b);
  analogWrite(11, 255 - g);
}

void setup() {
    huble_led(BLUE);
    delay(1000);
    pinMode(0, OUTPUT);
    pinMode(1, OUTPUT);
    power_off_left_attiny();
    power_off_right_attiny();


    Serial.begin(115200);
    Wire.begin();
    while(!Serial)
    {
        huble_led(OFF);
        delay(100);
        huble_led(BLUE);
        delay(100);
    }

}

int left_written = 0;
int right_written = 0;

void power_off_left_attiny() {
    digitalWrite(0, HIGH);
    //power_off_i2c();
}

void power_on_left_attiny() {
    digitalWrite(0, LOW);
}

void power_off_right_attiny() {
    digitalWrite(1, HIGH);
    //power_off_i2c();
}
void power_on_right_attiny() {
    digitalWrite(1, LOW);
}

void print_result(byte result) {
    Serial.print("result = ");
    Serial.println(result);

}

int run_command(byte address, byte command) {

    Wire.beginTransmission(address);
    Wire.write(command); // erase user space
    Wire.write(0x00); // dummy end byte
    byte result = Wire.endTransmission();
    print_result(result);
    return result;
}



byte read_crc16(byte addr, byte *version, uint16_t *crc16, uint16_t offset, uint16_t length) {
    byte result = 2;

    Wire.beginTransmission(addr);
    Wire.write(0x06); // get version and CRC16
    Wire.write(offset & 0xff); // addr (lo)
    Wire.write(offset >> 8); // addr (hi)
    Wire.write(length & 0xff); // len (lo)
    Wire.write(length >> 8); // len (hi)
    result = Wire.endTransmission();
    if (result != 0) {
        return result;
    }
    Wire.requestFrom(addr, (uint8_t) 3);
    Serial.print("Available bytes: ");
    Serial.println(Wire.available());
    if (Wire.available() == 0) {
    }
    byte v = Wire.read();
    *version = v;
    if (Wire.available() == 0) {
        return 0xFF;
    }
    byte crc16_lo = Wire.read();
    if (Wire.available() == 0) {
        return 0xFF;
    }
    byte crc16_hi = Wire.read();
    while (Wire.available()) {
        byte c = Wire.read();
    }
    *crc16 = (crc16_hi << 8) | crc16_lo;
    return result;
}


void get_version (byte addr) {

    byte result = 2;
    while (result != 0) {
        Serial.print("Reading CRC16...");

        byte version;
        uint16_t crc16;
        result = read_crc16(addr, &version, &crc16, 0, firmware_length);

        Serial.print("result ");
        Serial.println(result);

        if (result != 0) {
            _delay_ms(100);
            continue;
        }
        Serial.print("Version: ");
        Serial.println(version);
        Serial.print("Existing CRC16 of 0000-1FFF: ");
        Serial.println(crc16, HEX);
    }

}



int erase_program(byte addr) {

    Serial.println("Erasing");
    Wire.beginTransmission(addr);
    Wire.write(0x04); // erase user space
    byte result = Wire.endTransmission();
    Serial.print("result = ");
    Serial.println(result);
    if (result != 0) {
        _delay_ms(1000);
        return -1;
    }
    return 0;

}


//int write_firmware(byte addr) { //, byte *firmware ) {
int write_firmware(byte addr, const byte *firmware ) {

    byte result = 3;
    byte o = 0;

    for (uint16_t i = 0; i < firmware_length; i += page_size) {
        Serial.print("Page ");
        Serial.print(offsets[o]);
        Serial.print(" setting address...");
        Wire.beginTransmission(addr);
        Wire.write(0x1); // write page addr
        Wire.write(offsets[o] & 0xff); // write page addr
        Wire.write(offsets[o] >> 8);
        result = Wire.endTransmission();
        _delay_ms(DELAY);
        // got something other than ACK. Start over.
        if (result != 0) {
            Serial.println("Error setting the page address");
            return -1;
        }

        // transmit each frame separately

        for (uint8_t frame = 0; frame < page_size / frame_size; frame++) {
            Wire.beginTransmission(addr);
            Wire.write(0x2); // continue page
            uint16_t crc16 = 0xffff;
            for (uint8_t j = frame * frame_size; j < (frame + 1) * frame_size; j++) {
                if (i + j < firmware_length) {
                    uint8_t b = pgm_read_byte(&firmware[i + j]);
                    Wire.write(b);
                    crc16 = _crc16_update(crc16, b);
                } else {
                    Wire.write(blank);
                    crc16 = _crc16_update(crc16, blank);
                }
            }
            // write the CRC16, little end first
            Wire.write(crc16 & 0xff);
            Wire.write(crc16 >> 8);
            Wire.write(0x00); // dummy end byte
            result = Wire.endTransmission();
            Serial.print(": frame ");
            Serial.print(frame);
            Serial.print(" = ");
            Serial.print(result);
            // got something other than NACK. Start over.
            if (result != 3) {
                Serial.println("Error: Got something other than NACK");
                return -1;
            }
            delay(DELAY);
        }
        o++;
        Serial.println("");
    }
    return 0;
}


int verify_firmware(byte addr, const byte *firmware) {
    byte result = 3;
    // verify firmware
    Serial.println("## Verifying firmware installation");
    while (result != 0) {
        Serial.print("CRC16: ");

        byte version;
        uint16_t crc16;
        // skip the first 4 bytes, are they were probably overwritten by the reset vector preservation
        result = read_crc16(addr, &version, &crc16, offsets[0] + 4, firmware_length - 4);

        Serial.println(result);

        if (result != 0) {
            _delay_ms(100);
            continue;
        }
        Serial.print("Version: ");
        Serial.println(version);
        Serial.print("CRC CRC16 of ");
        Serial.print(offsets[0] + 4, HEX);
        Serial.print("-");
        Serial.print(offsets[0] + firmware_length, HEX);
        Serial.print(": ");
        Serial.println(crc16, HEX);

        // calculate our own CRC16
        uint16_t check_crc16 = 0xffff;
        for (uint16_t i = 4; i < firmware_length; i++) {
            check_crc16 = _crc16_update(check_crc16, pgm_read_byte(&firmware[i]));
        }
        if (crc16 != check_crc16) {
            Serial.print("CRC does not match ours: ");
            Serial.println(check_crc16, HEX);
            return -1;
        }
        Serial.println("CRC check: OK");
    }
    return 0;
}

byte update_attiny(byte addr, byte *firmware) {
    Serial.println("Communicating");

    get_version(addr);

    int erased = erase_program(addr);

    if (erased == -1) {

        Serial.println("Erase failed.");
        return 0;
    }

    int firmware_written = write_firmware(addr, firmware);
    if(firmware_written == -1) {
        Serial.println("Firmware write failed.");
        return 0;
    }

    int firmware_verified = verify_firmware(addr, firmware);
    if(firmware_verified == -1) {
        Serial.println("Firmware verify failed");
        return 0;
    }

    Serial.println("Resetting ATTiny");
    int result = run_command(addr, 0x03); // execute app
    Serial.println("Done!");

    return 1;
}

void loop() {

    delay(1000);


    if (left_written > 0 && right_written > 0 ) {

        Serial.println ("Both ATTiny MCUs have been flashed");
        Serial.println("It is now safe to reflash your keyboard with regular firmware");
        huble_led(GREEN);
        return;
    }

    Serial.println("Starting!");
    Wire.begin();

    if (left_written > 0) {
        Serial.println("Already done with the left hand.");
        // we're done
    } else {
        //reset_left_attiny();
        power_on_left_attiny();
        huble_led(BLUE);
        left_written = update_attiny(LEFT_ADDRESS, firmware_left);
        power_off_left_attiny();

        if(left_written)
            huble_led(GREEN);
        else
            huble_led(RED);
        delay(1000);

    }

    if (right_written > 0) {
        Serial.println("Already done with the right hand.");
        Serial.println(right_written);
        // we're done
    } else {
        //reset_right_attiny();
        power_on_right_attiny();
        huble_led(BLUE);
        right_written = update_attiny(RIGHT_ADDRESS, firmware_right);
        power_off_right_attiny();

        if(right_written)
            huble_led(GREEN);
        else
            huble_led(RED);
        delay(1000);
    }



}



