#include "crc16.h"
#include "Arduino.h"
#include "Wire.h"
#include "KeyboardioScanner.h"


#define page_size %d
#define frame_size %d
#define blank 0x%x
#define pages %d
#define firmware_length %d
#define DELAY %d
#define LEFT_ADDRESS 0x50
#define RIGHT_ADDRESS 0x53


#define ENDTRANS_SUCCESS 0
#define ENDTRANS_DATA_TOO_LONG 1
#define ENDTRANS_ADDR_NACK 2
#define ENDTRANS_DATA_NACK 3
#define ENDTRANS_ERROR 4

#define BRIGHT 150
#define RED   {BRIGHT,0,0}
#define GREEN {0,BRIGHT,0}
#define BLUE  {0,0,BRIGHT}
#define OFF   {0,0,0}


uint16_t offsets[pages] = {%s};
byte firmware_left[firmware_length] PROGMEM = {%s};
byte firmware_right[firmware_length] PROGMEM = {%s};

// rgb pwm pin definitions
int red[3] = { 3, 6, 10, };
int blu[3] = { 4, 8, 11, };
int grn[3] = { 5, 9, 12, };

void showAnalogRGB(cRGB rgb, int i)
{
    // invert as these are common anode, and make sure we reach 65535 to be able to turn fully off.
    analogWrite(red[i], ((256-pgm_read_byte(&gamma8[rgb.r])) << 8) -1 );
    analogWrite(grn[i], ((256-pgm_read_byte(&gamma8[rgb.g])) << 8) -1 );
    analogWrite(blu[i], ((256-pgm_read_byte(&gamma8[rgb.b])) << 8) -1 );
}


void setup() {
    analogWriteResolution(16);
    showAnalogRGB(BLUE, 1);
    delay(1000);
    pinMode(0, OUTPUT);
    pinMode(1, OUTPUT);
    power_on_left_attiny();
    power_on_right_attiny();


    SerialUSB.begin(115200);
    while(!SerialUSB)
    {
        showAnalogRGB(OFF, 1);
        delay(100);
        showAnalogRGB(BLUE, 1);
        delay(100);
    }

    power_off_left_attiny();
    power_off_right_attiny();

    Wire.begin();
    showAnalogRGB(RED, 1);
    delay(1000);


}

int left_written = 0;
int right_written = 0;

void power_off_left_attiny() {
    digitalWrite(0, LOW);
}

void power_on_left_attiny() {
    digitalWrite(0, HIGH);
}

void power_off_right_attiny() {
    digitalWrite(1, LOW);
}
void power_on_right_attiny() {
    digitalWrite(1, HIGH);
}

void print_result(byte result) {
    SerialUSB.print("result = ");
    SerialUSB.println(result);

}

int run_command(byte address, byte command) {

    Wire.beginTransmission(address);
    Wire.write(command); // erase user space
    Wire.write(0x00); // dummy end byte
    byte result = Wire.endTransmission();
    print_result(result);
    return result;
}



byte read_crc16(byte addr, byte *version, uint16_t *crc16, uint16_t offset, uint16_t length) {
    byte result = 2;

    Wire.beginTransmission(addr);
    Wire.write(0x06); // get version and CRC16
    Wire.write(offset & 0xff); // addr (lo)
    Wire.write(offset >> 8); // addr (hi)
    Wire.write(length & 0xff); // len (lo)
    Wire.write(length >> 8); // len (hi)
    result = Wire.endTransmission();
    if (result != 0) {
        return result;
    }
    Wire.requestFrom(addr, (uint8_t) 3);
    SerialUSB.print("Available bytes: ");
    SerialUSB.println(Wire.available());
    if (Wire.available() == 0) {
    }
    byte v = Wire.read();
    *version = v;
    if (Wire.available() == 0) {
        return 0xFF;
    }
    byte crc16_lo = Wire.read();
    if (Wire.available() == 0) {
        return 0xFF;
    }
    byte crc16_hi = Wire.read();
    while (Wire.available()) {
        byte c = Wire.read();
    }
    *crc16 = (crc16_hi << 8) | crc16_lo;
    return result;
}


void get_version (byte addr) {

    byte result = 2;
    int count = 0;
    while (result != 0) {
        SerialUSB.print("Reading CRC16...");
        count ++;

        byte version;
        uint16_t crc16;
        result = read_crc16(addr, &version, &crc16, 0, firmware_length);

        SerialUSB.print("result ");
        SerialUSB.println(result);

        if (result != 0) {
            delay(100);
            if(count == 10) {
                SerialUSB.println("power cycling");
                count = 0;
                if(addr == LEFT_ADDRESS)
                {
                    power_off_left_attiny();
                    delay(500);
                    power_on_left_attiny();
                    delay(100); // takes 100ms for the bootloader to startup
                }
                else
                {
                    power_off_right_attiny();
                    delay(500);
                    power_on_right_attiny();
                    delay(100); // takes 100ms for the bootloader to startup
                }
            }
            continue;
        }
        SerialUSB.print("Version: ");
        SerialUSB.println(version);
        SerialUSB.print("Existing CRC16 of 0000-1FFF: ");
        SerialUSB.println(crc16, HEX);
    }

}



int erase_program(byte addr) {

    SerialUSB.println("Erasing");
    Wire.beginTransmission(addr);
    Wire.write(0x04); // erase user space
    byte result = Wire.endTransmission();
    SerialUSB.print("result = ");
    SerialUSB.println(result);
    if (result != 0) {
        delay(1000);
        return -1;
    }
    return 0;

}


//int write_firmware(byte addr) { //, byte *firmware ) {
int write_firmware(byte addr, const byte *firmware ) {

    byte result = 3;
    byte o = 0;

    for (uint16_t i = 0; i < firmware_length; i += page_size) {
        SerialUSB.print("Page ");
        SerialUSB.print(offsets[o]);
        SerialUSB.print(" setting address...");
        Wire.beginTransmission(addr);
        Wire.write(0x1); // write page addr
        Wire.write(offsets[o] & 0xff); // write page addr
        Wire.write(offsets[o] >> 8);
        result = Wire.endTransmission();
        delay(DELAY);
        // got something other than ACK. Start over.
        if (result != 0) {
            SerialUSB.println("Error setting the page address");
            return -1;
        }

        // transmit each frame separately

        for (uint8_t frame = 0; frame < page_size / frame_size; frame++) {
            Wire.beginTransmission(addr);
            Wire.write(0x2); // continue page
            uint16_t crc16 = 0xffff;
            for (uint8_t j = frame * frame_size; j < (frame + 1) * frame_size; j++) {
                if (i + j < firmware_length) {
                    uint8_t b = pgm_read_byte(&firmware[i + j]);
                    Wire.write(b);
                    crc16 = _crc16_update(crc16, b);
                } else {
                    Wire.write(blank);
                    crc16 = _crc16_update(crc16, blank);
                }
            }
            // write the CRC16, little end first
            Wire.write(crc16 & 0xff);
            Wire.write(crc16 >> 8);
            Wire.write(0x00); // dummy end byte
            result = Wire.endTransmission();
            SerialUSB.print(": frame ");
            SerialUSB.print(frame);
            SerialUSB.print(" = ");
            SerialUSB.print(result);
            // got something other than NACK. Start over.
            if (result != 3) {
                SerialUSB.println("Error: Got something other than NACK");
                return -1;
            }
            delay(DELAY);
        }
        o++;
        SerialUSB.println("");
    }
    return 0;
}


int verify_firmware(byte addr, const byte *firmware) {
    byte result = 3;
    // verify firmware
    SerialUSB.println("## Verifying firmware installation");
    while (result != 0) {
        SerialUSB.print("CRC16: ");

        byte version;
        uint16_t crc16;
        // skip the first 4 bytes, are they were probably overwritten by the reset vector preservation
        result = read_crc16(addr, &version, &crc16, offsets[0] + 4, firmware_length - 4);

        SerialUSB.println(result);

        if (result != 0) {
            delay(100);
            continue;
        }
        SerialUSB.print("Version: ");
        SerialUSB.println(version);
        SerialUSB.print("CRC CRC16 of ");
        SerialUSB.print(offsets[0] + 4, HEX);
        SerialUSB.print("-");
        SerialUSB.print(offsets[0] + firmware_length, HEX);
        SerialUSB.print(": ");
        SerialUSB.println(crc16, HEX);

        // calculate our own CRC16
        uint16_t check_crc16 = 0xffff;
        for (uint16_t i = 4; i < firmware_length; i++) {
            check_crc16 = _crc16_update(check_crc16, pgm_read_byte(&firmware[i]));
        }
        if (crc16 != check_crc16) {
            SerialUSB.print("CRC does not match ours: ");
            SerialUSB.println(check_crc16, HEX);
            return -1;
        }
        SerialUSB.println("CRC check: OK");
    }
    return 0;
}

byte update_attiny(byte addr, byte *firmware) {
    SerialUSB.println("Communicating");

    get_version(addr);

    int erased = erase_program(addr);

    if (erased == -1) {

        SerialUSB.println("Erase failed.");
        return 0;
    }

    int firmware_written = write_firmware(addr, firmware);
    if(firmware_written == -1) {
        SerialUSB.println("Firmware write failed.");
        return 0;
    }

    int firmware_verified = verify_firmware(addr, firmware);
    if(firmware_verified == -1) {
        SerialUSB.println("Firmware verify failed");
        return 0;
    }

    SerialUSB.println("Resetting ATTiny");
    int result = run_command(addr, 0x03); // execute app
    SerialUSB.println("Done!");

    return 1;
}

void loop() {

    delay(1000);


    if (left_written > 0 && right_written > 0 ) {

        SerialUSB.println ("Both ATTiny MCUs have been flashed");
        SerialUSB.println("It is now safe to reflash your keyboard with regular firmware");
        showAnalogRGB(GREEN, 1);
        return;
    }

    SerialUSB.println("Starting!");
    Wire.begin();

    if (left_written > 0) {
        SerialUSB.println("Already done with the left hand.");
        // we're done
    } else {
        //reset_left_attiny();
        power_on_left_attiny();
        showAnalogRGB(BLUE, 1);
        left_written = update_attiny(LEFT_ADDRESS, firmware_left);
        power_off_left_attiny();

        if(left_written)
            showAnalogRGB(GREEN, 1);
        else
            showAnalogRGB(RED, 1);
        delay(1000);

    }

    if (right_written > 0) {
        SerialUSB.println("Already done with the right hand.");
        SerialUSB.println(right_written);
        // we're done
    } else {
        //reset_right_attiny();
        power_on_right_attiny();
        showAnalogRGB(BLUE, 1);
        right_written = update_attiny(RIGHT_ADDRESS, firmware_right);
        power_off_right_attiny();

        if(right_written)
            showAnalogRGB(GREEN, 1);
        else
            showAnalogRGB(RED, 1);
        delay(1000);
    }



}



